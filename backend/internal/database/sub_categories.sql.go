// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sub_categories.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSubCategory = `-- name: CreateSubCategory :one
INSERT INTO sub_categories (id, category_id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated)
VALUES ($1, $2, $3, $4, $5, $6, true, NOW(), NOW())
RETURNING id, category_id, name, description, image_url, seo_keywords, is_active, created_at, last_updated
`

type CreateSubCategoryParams struct {
	ID          uuid.UUID
	CategoryID  uuid.UUID
	Name        string
	Description sql.NullString
	ImageUrl    sql.NullString
	SeoKeywords sql.NullString
}

func (q *Queries) CreateSubCategory(ctx context.Context, arg CreateSubCategoryParams) (SubCategory, error) {
	row := q.db.QueryRowContext(ctx, createSubCategory,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.SeoKeywords,
	)
	var i SubCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.SeoKeywords,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteSubCategory = `-- name: DeleteSubCategory :exec
DELETE FROM sub_categories
WHERE id = $1
`

func (q *Queries) DeleteSubCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubCategory, id)
	return err
}

const getProductBySubCategory = `-- name: GetProductBySubCategory :many
SELECT id, name, description, image_url, price, stock, brand, rating, review_count, discount_rate, keywords, is_active, created_at, last_updated, sub_category_id
FROM products
WHERE sub_category_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetProductBySubCategoryParams struct {
	SubCategoryID uuid.NullUUID
	Limit         int32
	Offset        int32
}

func (q *Queries) GetProductBySubCategory(ctx context.Context, arg GetProductBySubCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductBySubCategory, arg.SubCategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Price,
			&i.Stock,
			&i.Brand,
			&i.Rating,
			&i.ReviewCount,
			&i.DiscountRate,
			&i.Keywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.SubCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCountBySubCategory = `-- name: GetProductCountBySubCategory :one
SELECT COUNT(*)
FROM products
WHERE sub_category_id = $1
`

func (q *Queries) GetProductCountBySubCategory(ctx context.Context, subCategoryID uuid.NullUUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProductCountBySubCategory, subCategoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSubCategory = `-- name: GetSubCategory :one
SELECT id, category_id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated
FROM sub_categories
WHERE id = $1
`

func (q *Queries) GetSubCategory(ctx context.Context, id uuid.UUID) (SubCategory, error) {
	row := q.db.QueryRowContext(ctx, getSubCategory, id)
	var i SubCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.SeoKeywords,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getSubCategoryByCategory = `-- name: GetSubCategoryByCategory :many
SELECT id, category_id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated
FROM sub_categories
WHERE category_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetSubCategoryByCategoryParams struct {
	CategoryID uuid.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) GetSubCategoryByCategory(ctx context.Context, arg GetSubCategoryByCategoryParams) ([]SubCategory, error) {
	rows, err := q.db.QueryContext(ctx, getSubCategoryByCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCategory
	for rows.Next() {
		var i SubCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.SeoKeywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubCategoryCountByCategory = `-- name: GetSubCategoryCountByCategory :one
SELECT COUNT(*)
FROM sub_categories
WHERE category_id = $1
`

func (q *Queries) GetSubCategoryCountByCategory(ctx context.Context, categoryID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSubCategoryCountByCategory, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listAllSubCategories = `-- name: ListAllSubCategories :many
SELECT id, category_id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated
FROM sub_categories
`

func (q *Queries) ListAllSubCategories(ctx context.Context) ([]SubCategory, error) {
	rows, err := q.db.QueryContext(ctx, listAllSubCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCategory
	for rows.Next() {
		var i SubCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.SeoKeywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubCategory = `-- name: UpdateSubCategory :one
UPDATE sub_categories SET
    category_id = $2,
    name = $3,
    description = $4,
    image_url = $5,
    SEO_keywords = $6,
    last_updated = NOW()
WHERE id = $1
RETURNING id, category_id, name, description, image_url, seo_keywords, is_active, created_at, last_updated
`

type UpdateSubCategoryParams struct {
	ID          uuid.UUID
	CategoryID  uuid.UUID
	Name        string
	Description sql.NullString
	ImageUrl    sql.NullString
	SeoKeywords sql.NullString
}

func (q *Queries) UpdateSubCategory(ctx context.Context, arg UpdateSubCategoryParams) (SubCategory, error) {
	row := q.db.QueryRowContext(ctx, updateSubCategory,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.SeoKeywords,
	)
	var i SubCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.SeoKeywords,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
