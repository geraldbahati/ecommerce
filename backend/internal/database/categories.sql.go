// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: categories.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated
`

type CreateCategoryParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	ImageUrl    sql.NullString
	SeoKeywords sql.NullString
	IsActive    bool
	CreatedAt   time.Time
	LastUpdated sql.NullTime
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.SeoKeywords,
		arg.IsActive,
		arg.CreatedAt,
		arg.LastUpdated,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.SeoKeywords,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const findCategoriesBySoftName = `-- name: FindCategoriesBySoftName :many
SELECT id, name, description, image_url, seo_keywords, is_active, created_at, last_updated FROM categories
WHERE name LIKE $1
LIMIT $2 OFFSET $3
`

type FindCategoriesBySoftNameParams struct {
	Name   string
	Limit  int32
	Offset int32
}

func (q *Queries) FindCategoriesBySoftName(ctx context.Context, arg FindCategoriesBySoftNameParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, findCategoriesBySoftName, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.SeoKeywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryByID = `-- name: FindCategoryByID :one
SELECT id, name, description, image_url, seo_keywords, is_active, created_at, last_updated FROM categories
WHERE id = $1
`

func (q *Queries) FindCategoryByID(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.SeoKeywords,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getActiveCategories = `-- name: GetActiveCategories :many
SELECT id, name, description, image_url, seo_keywords, is_active, created_at, last_updated FROM categories
WHERE is_active = TRUE
LIMIT $1 OFFSET $2
`

type GetActiveCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetActiveCategories(ctx context.Context, arg GetActiveCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getActiveCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.SeoKeywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, description, image_url, seo_keywords, is_active, created_at, last_updated FROM categories
LIMIT $1 OFFSET $2
`

type GetAllCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllCategories(ctx context.Context, arg GetAllCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.SeoKeywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryCount = `-- name: GetCategoryCount :one
SELECT COUNT(*) FROM categories
`

func (q *Queries) GetCategoryCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCategoryCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getInactiveCategories = `-- name: GetInactiveCategories :many
SELECT id, name, description, image_url, seo_keywords, is_active, created_at, last_updated FROM categories
WHERE is_active = FALSE
LIMIT $1 OFFSET $2
`

type GetInactiveCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetInactiveCategories(ctx context.Context, arg GetInactiveCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getInactiveCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.SeoKeywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories SET
    name = $2,
    description = $3,
    image_url = $4,
    SEO_keywords = $5,
    is_active = $6,
    last_updated = $7
WHERE id = $1
RETURNING id, name, description, image_url, SEO_keywords, is_active, created_at, last_updated
`

type UpdateCategoryParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	ImageUrl    sql.NullString
	SeoKeywords sql.NullString
	IsActive    bool
	LastUpdated sql.NullTime
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.SeoKeywords,
		arg.IsActive,
		arg.LastUpdated,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.SeoKeywords,
		&i.IsActive,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
