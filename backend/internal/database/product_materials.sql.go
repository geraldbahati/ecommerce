// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: product_materials.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteProductMaterial = `-- name: DeleteProductMaterial :exec
DELETE FROM product_materials
WHERE id = $1
`

func (q *Queries) DeleteProductMaterial(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductMaterial, id)
	return err
}

const getProductsByMaterial = `-- name: GetProductsByMaterial :many
SELECT p.id, p.name, p.description, p.image_url, p.price, p.stock, p.brand, p.rating, p.review_count, p.discount_rate, p.keywords, p.is_active, p.created_at, p.last_updated, p.sub_category_id FROM products p
    INNER JOIN product_materials pm ON p.id = pm.product_id
WHERE pm.material_id = $1
LIMIT $2 OFFSET $3
`

type GetProductsByMaterialParams struct {
	MaterialID uuid.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) GetProductsByMaterial(ctx context.Context, arg GetProductsByMaterialParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByMaterial, arg.MaterialID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Price,
			&i.Stock,
			&i.Brand,
			&i.Rating,
			&i.ReviewCount,
			&i.DiscountRate,
			&i.Keywords,
			&i.IsActive,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.SubCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductMaterial = `-- name: UpdateProductMaterial :one
INSERT INTO product_materials (id, product_id, material_id, created_at, last_updated)
VALUES ($1, $2, $3, NOW(), NULL)
RETURNING id, product_id, material_id, created_at, last_updated
`

type UpdateProductMaterialParams struct {
	ID         uuid.UUID
	ProductID  uuid.UUID
	MaterialID uuid.UUID
}

func (q *Queries) UpdateProductMaterial(ctx context.Context, arg UpdateProductMaterialParams) (ProductMaterial, error) {
	row := q.db.QueryRowContext(ctx, updateProductMaterial, arg.ID, arg.ProductID, arg.MaterialID)
	var i ProductMaterial
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.MaterialID,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
