// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: colours.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createColour = `-- name: CreateColour :one
INSERT INTO colours (id, colour_hex, created_at, last_updated)
VALUES ($1, $2, NOW(), NULL)
RETURNING id, colour_hex, created_at, last_updated
`

type CreateColourParams struct {
	ID        uuid.UUID
	ColourHex string
}

func (q *Queries) CreateColour(ctx context.Context, arg CreateColourParams) (Colour, error) {
	row := q.db.QueryRowContext(ctx, createColour, arg.ID, arg.ColourHex)
	var i Colour
	err := row.Scan(
		&i.ID,
		&i.ColourHex,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteColour = `-- name: DeleteColour :exec
DELETE FROM colours
WHERE id = $1
`

func (q *Queries) DeleteColour(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteColour, id)
	return err
}

const getColourByHex = `-- name: GetColourByHex :one
SELECT id, colour_hex, created_at, last_updated FROM colours
WHERE colour_hex = $1
`

func (q *Queries) GetColourByHex(ctx context.Context, colourHex string) (Colour, error) {
	row := q.db.QueryRowContext(ctx, getColourByHex, colourHex)
	var i Colour
	err := row.Scan(
		&i.ID,
		&i.ColourHex,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getColourByID = `-- name: GetColourByID :one
SELECT id, colour_hex, created_at, last_updated FROM colours
WHERE id = $1
`

func (q *Queries) GetColourByID(ctx context.Context, id uuid.UUID) (Colour, error) {
	row := q.db.QueryRowContext(ctx, getColourByID, id)
	var i Colour
	err := row.Scan(
		&i.ID,
		&i.ColourHex,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getColourCount = `-- name: GetColourCount :one
SELECT COUNT(*) FROM colours
`

func (q *Queries) GetColourCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getColourCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getColours = `-- name: GetColours :many
SELECT id, colour_hex, created_at, last_updated FROM colours
LIMIT $1 OFFSET $2
`

type GetColoursParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetColours(ctx context.Context, arg GetColoursParams) ([]Colour, error) {
	rows, err := q.db.QueryContext(ctx, getColours, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Colour
	for rows.Next() {
		var i Colour
		if err := rows.Scan(
			&i.ID,
			&i.ColourHex,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductColours = `-- name: GetProductColours :many
SELECT c.id, c.colour_hex, c.created_at, c.last_updated FROM colours c
    INNER JOIN product_colours pc ON c.id = pc.colour_id
WHERE pc.product_id = $1
LIMIT $2 OFFSET $3
`

type GetProductColoursParams struct {
	ProductID uuid.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) GetProductColours(ctx context.Context, arg GetProductColoursParams) ([]Colour, error) {
	rows, err := q.db.QueryContext(ctx, getProductColours, arg.ProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Colour
	for rows.Next() {
		var i Colour
		if err := rows.Scan(
			&i.ID,
			&i.ColourHex,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateColour = `-- name: UpdateColour :one
UPDATE colours SET
    colour_hex = $2,
    last_updated = NOW()
WHERE id = $1
RETURNING id, colour_hex, created_at, last_updated
`

type UpdateColourParams struct {
	ID        uuid.UUID
	ColourHex string
}

func (q *Queries) UpdateColour(ctx context.Context, arg UpdateColourParams) (Colour, error) {
	row := q.db.QueryRowContext(ctx, updateColour, arg.ID, arg.ColourHex)
	var i Colour
	err := row.Scan(
		&i.ID,
		&i.ColourHex,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
