// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: wishlists.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addItemToWishlist = `-- name: AddItemToWishlist :one
INSERT INTO wishlist_items (id, wishlist_id, product_id, priority, created_at, last_updated)
VALUES (UUID_GENERATE_V4(), $1, $2, 'medium', NOW(), NOW())
RETURNING id, wishlist_id, product_id, priority, created_at, last_updated
`

type AddItemToWishlistParams struct {
	WishlistID uuid.UUID
	ProductID  uuid.UUID
}

func (q *Queries) AddItemToWishlist(ctx context.Context, arg AddItemToWishlistParams) (WishlistItem, error) {
	row := q.db.QueryRowContext(ctx, addItemToWishlist, arg.WishlistID, arg.ProductID)
	var i WishlistItem
	err := row.Scan(
		&i.ID,
		&i.WishlistID,
		&i.ProductID,
		&i.Priority,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const createWishlist = `-- name: CreateWishlist :one
INSERT INTO wishlists (id, user_id, name, visibility, created_at, last_updated)
VALUES (UUID_GENERATE_V4(), $1,'My Wishlist', 'private', NOW(), NOW())
RETURNING id, user_id, name, visibility, created_at, last_updated
`

func (q *Queries) CreateWishlist(ctx context.Context, userID uuid.UUID) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, createWishlist, userID)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Visibility,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteWishlist = `-- name: DeleteWishlist :exec
DELETE FROM wishlists
WHERE id = $1
`

func (q *Queries) DeleteWishlist(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWishlist, id)
	return err
}

const findCommonWishlistLists = `-- name: FindCommonWishlistLists :many
SELECT product_id, COUNT(DISTINCT user_id) AS user_count
FROM wishlist_items wi
JOIN wishlists w ON wi.wishlist_id = w.id
GROUP BY product_id
HAVING user_count > 1
`

type FindCommonWishlistListsRow struct {
	ProductID uuid.UUID
	UserCount int64
}

func (q *Queries) FindCommonWishlistLists(ctx context.Context) ([]FindCommonWishlistListsRow, error) {
	rows, err := q.db.QueryContext(ctx, findCommonWishlistLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCommonWishlistListsRow
	for rows.Next() {
		var i FindCommonWishlistListsRow
		if err := rows.Scan(&i.ProductID, &i.UserCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmailsOfUsersWithWishlistItems = `-- name: GetEmailsOfUsersWithWishlistItems :many
SELECT u.email
FROM users u
JOIN wishlists w ON u.id = w.user_id
JOIN wishlist_items wi ON w.id = wi.wishlist_id
WHERE wi.product_id = $1 AND w.is_active = TRUE
`

func (q *Queries) GetEmailsOfUsersWithWishlistItems(ctx context.Context, productID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getEmailsOfUsersWithWishlistItems, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemFromWishlist = `-- name: RemoveItemFromWishlist :exec
DELETE FROM wishlist_items
WHERE wishlist_id = $1 AND product_id = $2
`

type RemoveItemFromWishlistParams struct {
	WishlistID uuid.UUID
	ProductID  uuid.UUID
}

func (q *Queries) RemoveItemFromWishlist(ctx context.Context, arg RemoveItemFromWishlistParams) error {
	_, err := q.db.ExecContext(ctx, removeItemFromWishlist, arg.WishlistID, arg.ProductID)
	return err
}

const trackInterestInWishlistItem = `-- name: TrackInterestInWishlistItem :many
SELECT product_id, COUNT(*) AS interest_count
FROM wishlist_items
GROUP BY product_id
`

type TrackInterestInWishlistItemRow struct {
	ProductID     uuid.UUID
	InterestCount int64
}

func (q *Queries) TrackInterestInWishlistItem(ctx context.Context) ([]TrackInterestInWishlistItemRow, error) {
	rows, err := q.db.QueryContext(ctx, trackInterestInWishlistItem)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackInterestInWishlistItemRow
	for rows.Next() {
		var i TrackInterestInWishlistItemRow
		if err := rows.Scan(&i.ProductID, &i.InterestCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWishlist = `-- name: UpdateWishlist :one
UPDATE wishlists SET
    name = $2,
    visibility = $3,
    last_updated = NOW()
WHERE id = $1
RETURNING id, user_id, name, visibility, created_at, last_updated
`

type UpdateWishlistParams struct {
	ID         uuid.UUID
	Name       string
	Visibility string
}

func (q *Queries) UpdateWishlist(ctx context.Context, arg UpdateWishlistParams) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, updateWishlist, arg.ID, arg.Name, arg.Visibility)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Visibility,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const wishlistCleanup = `-- name: WishlistCleanup :exec


INSERT INTO wishlist_items (id, wishlist_id, product_id, priority, created_at, last_updated)
SELECT UUID_GENERATE_V4(), $2, wi1.product_id, 'medium', NOW(), NOW()
FROM wishlist_items wi1
WHERE wi1.wishlist_id = $1
  AND NOT EXISTS (
    SELECT 1
    FROM wishlist_items wi2
    WHERE wi2.wishlist_id = $2
      AND wi2.product_id = wi1.product_id
)
`

type WishlistCleanupParams struct {
	WishlistID   uuid.UUID
	WishlistID_2 uuid.UUID
}

func (q *Queries) WishlistCleanup(ctx context.Context, arg WishlistCleanupParams) error {
	_, err := q.db.ExecContext(ctx, wishlistCleanup, arg.WishlistID, arg.WishlistID_2)
	return err
}
